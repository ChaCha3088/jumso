pipeline {
    agent any

    stages {
        stage('Build Docker Image WAS') {
            steps {
                script {
                    // /.aws 폴더를 /var/jenkins_home/workspace/Build Docker Image WAS로 복사한다.
                    sh 'cp -r /.aws "/var/jenkins_home/workspace/Build Docker Image WAS"'

                    // docker ps로 name이 was_a인 컨테이너가 있는지 확인한다.
                    def isA = sh(script: 'docker ps -a --format "{{.Names}} {{.Status}}" | grep was_a | grep "Up"', returnStatus: true)
                    def version = "a"

                    // isA가 true이면,
                    if (isA == 0) {
                        // version을 b로 바꾼다.
                        version = "b"
                    }

                    // /var/jenkins_home/workspace/Pull Main/was/build/libs/jumso.jar 파일을 /var/jenkins_home/workspace/Build Docker Image WAS/was로 복사한다.
                    sh 'cp "/var/jenkins_home/workspace/Pull Main/was/build/libs/jumso.jar" "/var/jenkins_home/workspace/Build Docker Image WAS"'

                    // /var/jenkins_home/dockerfile/DockerfileWAS 파일을 이용하여 WAS 이미지를 빌드한다.
                    sh "docker build --force-rm -t was_${version} -f /var/jenkins_home/dockerfile/DockerfileWAS ."
                }
            }
        }
    }

    post {
        success {
            echo 'WAS Image 빌드가 성공했습니다.'

            build 'Run WAS'
        }
        failure {
            echo 'WAS Image 빌드에 실패했습니다.'
        }
    }
}
